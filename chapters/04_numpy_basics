------------------------------------------------------
CHAPTER 04 - NUMPY BASICS
------------------------------------------------------

- Numpy Efficiency

    Numpy is very efficient with large arrays because
      1. The entire array is contiguous in memory
      2. Computations are performed without needing Python for loops


    For an idea of how efficient they are, we create a NumPy array of one million integers,
      and also an equivalent Python list.

    >>> import numpy as np
    >>> my_arr = np.arrange(1000000)
    >>> my_list = list(range(1000000))

    Now, lets multiply each sequence by 2:

    >>> %time for i in range(10): my_arr2 = my_arr * 2
    31 ms

    >>> %time for i in range(10): my_list2 = [x*2 for x in my_list]
    861 ms

    Numpy-based algorithms tend to be 10-100x faster than pure Python.



- The Numpy 'ndarray'

    >>> import numpy as np

    # Generate some random data
    >>> data = np.random.randn(2, 3)
    >>> data
    array([[-0.2047, 0.4789, -0.5194],
           [-0.5557, 1.9658, 1.3934]])


    # Now, I can write mathematical operations with data
    >>> data * 10
    array([[ -2.0471,   4.7894,  -5.1944],
           [ -5.5573,  19.6578,  13.9341]])

    >>> data + data
    array([[-0.4094,  0.9579, -1.0389],
           [-1.1115,  3.9316,  2.7868]])


    # ndarrays are homogenous, and they have a data type and a shape
    >>> data.shape
    (2, 3)

    >>> data.dtype
    dtype('float64')



- Creating ndarrays

    The easiest way to create an array is to use the 'array' function, which accepts
      any sequence-like object and produces an ndarray.


    # Pass in a list
    >>> data1 = [6, 7.5, 0, 1]
    >>> arr1 = np.array(data1)
    >>> arr1
    array([6., 7.5, 8., 0., 1.])


    # Nested sequences are converted to multidimensional arrays
    >>> data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
    >>> arr2 = np.array(data2)
    >>> arr2
    array([[1, 2, 3, 4],
           [5, 6, 7, 8]])

    >>> arr2.ndim
    2
    >>> arr2.shape
    (2, 4)
    >>> arr2.dtype
    dtype('int64')


    # Create an array of all zeros
    >>> np.zeros(10)
    array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])

    # Multidimensional array of all zeros
    >>> np.zeros((3, 6))
    array([[ 0.,  0.,  0.,  0.,  0.,  0.],
           [ 0.,  0.,  0.,  0.,  0.,  0.],
           [ 0.,  0.,  0.,  0.,  0.,  0.]])


    # Can also create an empty array, which may contain zeros or garbage values
    >>> np.empty((2, 3, 2))
    array([[[ 0.,  0.],
            [ 0.,  0.],
            [ 0.,  0.]],
           [[ 0.,  0.],
            [ 0.,  0.],
            [ 0.,  0.]]])



- Array Creation Functions

    array	                   Convert input data (list, tuple, array, or other sequence 
                               type) to an ndarray either by inferring a dtype or explicitly 
                               specifying a dtype; copies the input data by default

    asarray	                   Convert input to ndarray, but do not copy if the input is 
                               already an ndarray

    arange	                   Like the built-in range but returns an ndarray instead of a list

    ones, ones_like	           Produce an array of all 1s with the given shape and dtype; 
                               ones_like takes another array and produces a ones array of the 
                               same shape and dtype

    zeros, zeros_like	       Like ones and ones_like but producing arrays of 0s instead

    empty, empty_like	       Create new arrays by allocating new memory, but do not populate 
                               with any values like ones and zeros

    full, full_like	           Produce an array of the given shape and dtype with all values 
                               set to the indicated “fill value” full_like takes another array 
                               and produces a filled array of the same shape and dtype

    eye, identity	           Create a square N × N identity matrix (1s on the diagonal and 0s 
                               elsewhere)



- List of NumPy Data Types

    Type
    int8, uint8	                i1, u1	        Signed and unsigned 8-bit (1 byte) integer types
    int16, uint16	            i2, u2	        Signed and unsigned 16-bit integer types
    int32, uint32	            i4, u4	        Signed and unsigned 32-bit integer types
    int64, uint64	            i8, u8	        Signed and unsigned 64-bit integer types
    float16	                    f2	            Half-precision floating point
    float32	                    f4 or f	        Single-precision floating point; compatible with C float
    float64	                    f8 or d	        Double-precision floating point; compatible with C double / 
                                                  Python float
    float128	                f16 or g	    Extended-precision floating point
    complex64,                  c8, c16, c32	Complex numbers represented by two 32, 64, or 128 floats
    complex128, 
    complex256	
    bool	                    ?	            Boolean type storing True and False values
    object	                    O	            Python object type; a value can be any Python object
    string_	                    S	            Fixed-length ASCII string type (1 byte per character); 
                                                  for example, to create a string dtype with length 10, 
                                                  use 'S10'
    unicode_ 	                U	            Fixed-length Unicode type (number of bytes platform 
                                                  specific); same specification semantics as string_ 
                                                  (e.g., 'U10')



- Using NumPy Data Types

    # Specify the data type explicity instead of inferring it
    >>> arr1 = np.array([1, 2, 3], dtype=np.float64)

    # Cast an array to another type
    >>> int_array = np.array([1, 2, 3, 4, 5])
    >>> float_array = int_array.astype(np.float64)

    # Cast an array of strings to numbers
    >>> numeric_strings = np.array(['1.25', '-9.6', '42'], dptype=np.string_)
    >>> float_array = numeric_strings.astype(float)