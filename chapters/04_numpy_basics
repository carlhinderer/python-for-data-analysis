------------------------------------------------------
CHAPTER 04 - NUMPY BASICS
------------------------------------------------------

- Numpy Efficiency

    Numpy is very efficient with large arrays because
      1. The entire array is contiguous in memory
      2. Computations are performed without needing Python for loops


    For an idea of how efficient they are, we create a NumPy array of one million integers,
      and also an equivalent Python list.

    >>> import numpy as np
    >>> my_arr = np.arrange(1000000)
    >>> my_list = list(range(1000000))

    Now, lets multiply each sequence by 2:

    >>> %time for i in range(10): my_arr2 = my_arr * 2
    31 ms

    >>> %time for i in range(10): my_list2 = [x*2 for x in my_list]
    861 ms

    Numpy-based algorithms tend to be 10-100x faster than pure Python.



- The Numpy 'ndarray'

    >>> import numpy as np

    # Generate some random data
    >>> data = np.random.randn(2, 3)
    >>> data
    array([[-0.2047, 0.4789, -0.5194],
           [-0.5557, 1.9658, 1.3934]])


    # Now, I can write mathematical operations with data
    >>> data * 10
    array([[ -2.0471,   4.7894,  -5.1944],
           [ -5.5573,  19.6578,  13.9341]])

    >>> data + data
    array([[-0.4094,  0.9579, -1.0389],
           [-1.1115,  3.9316,  2.7868]])


    # ndarrays are homogenous, and they have a data type and a shape
    >>> data.shape
    (2, 3)

    >>> data.dtype
    dtype('float64')



- Creating ndarrays

    The easiest way to create an array is to use the 'array' function, which accepts
      any sequence-like object and produces an ndarray.


    # Pass in a list
    >>> data1 = [6, 7.5, 0, 1]
    >>> arr1 = np.array(data1)
    >>> arr1
    array([6., 7.5, 8., 0., 1.])


    # Nested sequences are converted to multidimensional arrays
    >>> data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
    >>> arr2 = np.array(data2)
    >>> arr2
    array([[1, 2, 3, 4],
           [5, 6, 7, 8]])

    >>> arr2.ndim
    2
    >>> arr2.shape
    (2, 4)
    >>> arr2.dtype
    dtype('int64')


    # Create an array of all zeros
    >>> np.zeros(10)
    array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])

    # Multidimensional array of all zeros
    >>> np.zeros((3, 6))
    array([[ 0.,  0.,  0.,  0.,  0.,  0.],
           [ 0.,  0.,  0.,  0.,  0.,  0.],
           [ 0.,  0.,  0.,  0.,  0.,  0.]])


    # Can also create an empty array, which may contain zeros or garbage values
    >>> np.empty((2, 3, 2))
    array([[[ 0.,  0.],
            [ 0.,  0.],
            [ 0.,  0.]],
           [[ 0.,  0.],
            [ 0.,  0.],
            [ 0.,  0.]]])



- Array Creation Functions

    array	                   Convert input data (list, tuple, array, or other sequence 
                               type) to an ndarray either by inferring a dtype or explicitly 
                               specifying a dtype; copies the input data by default

    asarray	                   Convert input to ndarray, but do not copy if the input is 
                               already an ndarray

    arange	                   Like the built-in range but returns an ndarray instead of a list

    ones, ones_like	           Produce an array of all 1s with the given shape and dtype; 
                               ones_like takes another array and produces a ones array of the 
                               same shape and dtype

    zeros, zeros_like	       Like ones and ones_like but producing arrays of 0s instead

    empty, empty_like	       Create new arrays by allocating new memory, but do not populate 
                               with any values like ones and zeros

    full, full_like	           Produce an array of the given shape and dtype with all values 
                               set to the indicated “fill value” full_like takes another array 
                               and produces a filled array of the same shape and dtype

    eye, identity	           Create a square N × N identity matrix (1s on the diagonal and 0s 
                               elsewhere)



- List of NumPy Data Types

    Type
    int8, uint8	                i1, u1	        Signed and unsigned 8-bit (1 byte) integer types
    int16, uint16	            i2, u2	        Signed and unsigned 16-bit integer types
    int32, uint32	            i4, u4	        Signed and unsigned 32-bit integer types
    int64, uint64	            i8, u8	        Signed and unsigned 64-bit integer types
    float16	                    f2	            Half-precision floating point
    float32	                    f4 or f	        Single-precision floating point; compatible with C float
    float64	                    f8 or d	        Double-precision floating point; compatible with C double / 
                                                  Python float
    float128	                f16 or g	    Extended-precision floating point
    complex64,                  c8, c16, c32	Complex numbers represented by two 32, 64, or 128 floats
    complex128, 
    complex256	
    bool	                    ?	            Boolean type storing True and False values
    object	                    O	            Python object type; a value can be any Python object
    string_	                    S	            Fixed-length ASCII string type (1 byte per character); 
                                                  for example, to create a string dtype with length 10, 
                                                  use 'S10'
    unicode_ 	                U	            Fixed-length Unicode type (number of bytes platform 
                                                  specific); same specification semantics as string_ 
                                                  (e.g., 'U10')



- Using NumPy Data Types

    # Specify the data type explicity instead of inferring it
    >>> arr1 = np.array([1, 2, 3], dtype=np.float64)

    # Cast an array to another type
    >>> int_array = np.array([1, 2, 3, 4, 5])
    >>> float_array = int_array.astype(np.float64)

    # Cast an array of strings to numbers
    >>> numeric_strings = np.array(['1.25', '-9.6', '42'], dptype=np.string_)
    >>> float_array = numeric_strings.astype(float)



- Basic Arithmetic

    Batch operations can be done on ndarrays without for loops.  This is known as 
      'vectorization'.

    >>> arr = np.array(d[1., 2., 3.], [4., 5., 6.])

    >>> arr * arr
    array([[ 1.,  2.,  3.],
           [ 4.,  5.,  6.]])

    >>> arr - arr
    array([[ 0.,  0.,  0.],
           [ 0.,  0.,  0.]])

    >>> 1 / arr
    array([[ 1.    ,  0.5   ,  0.3333],
           [ 0.25  ,  0.2   ,  0.1667]])

    >>> arr ** 0.5
    array([[ 1.    ,  1.4142,  1.7321],
           [ 2.    ,  2.2361,  2.4495]])


    # Comparisons between arrays yield boolean arrays
    >>> arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])
    >>> arr2 > arr
    array([[False,  True, False],
           [True, False,  True]], dtype=bool)



- Basic Indexing and Slicing

    # Indexing and slicing of 1D arrays is like other Python lists
    >>> arr = np.arange(10)
    >>> arr[5]
    5
    >>> arr[5:8]
    array([5, 6, 7])


    # Note that unlike with Python lists, slices are a view on the original array.  
    # If values are changed in the slice, they are changed in the original array also.
    # This is known as 'broadcasting'.

    >>> slice = arr[5:8]
    >>> slice[1] = 20
    >>> arr
    array([0, 1, 2, 3, 4, 5, 20, 7, 8, 9])

    # The 'bare slice' will assign all slice values in the array
    >>> slice[:] = 100
    >>> arr
    array([0, 1, 2, 3, 4, 100, 100, 100, 8, 9])

    # To get a copy in a slice instead
    >>> slice = arr[5:8].copy


    # With higher dimensional arrays, the elements at each index are arrays 
    #   rather than scalars.
    >>> arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    >>> arr2d[2]
    array([7, 8, 9])

    >>> arr2d[2][0]
    7


    # Create a 2x2x3 3D array
    >>> arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
    >>> arr3d
    array([[[ 1,  2,  3],
            [ 4,  5,  6]],
           [[ 7,  8,  9],
            [10, 11, 12]]])

    >>> arr3d[0]
    array([[1, 2, 3],
           [4, 5, 6]])

    # Both scalar values and arrays can be assigned to arr3d[0]
    >>> old_values = arr3d[0].copy()

    # Assign to scalar
    >>> arr3d[0] = 42
    >>> arr3d
    array([[[42, 42, 42],
            [42, 42, 42]],
           [[ 7,  8,  9],
            [10, 11, 12]]])

    # Assign to array
    >>> arr3d[0] = old_values
    >>> arr3d
    array([[[ 1,  2,  3],
            [ 4,  5,  6]],
           [[ 7,  8,  9],
            [10, 11, 12]]])

    # Can access into multiple indexes
    >>> arr3d[1, 0]
    array([7, 8, 9])



- Indexing With Slices

    # Slicing a 2D array
    >>> arr2d = np.array([1, 2, 3], [4, 5, 6], [7, 8, 9])
    >>> arr2d[:2]
    array([[1, 2, 3],
           [4, 5, 6]])

    >>> arr2d[:2, 1:]
    array([[2, 3],
           [5, 6]])

    # Get the first column of each row
    >>> arr2d[:, :1]
    array([[1],
           [4],
           [7]])

    # Assign to a slice expression
    >>> arr2d[:2, 1:] = 0
    >>> arr2d
    array([[1, 0, 0],
           [4, 0, 0],
           [7, 8, 9]])



- Boolean Indexing

    Here, we create an array of names with duplicates.  And, we also create some random
      normally distributed data using 'numpy.random'.


    # Create array of names with duplicates
    >>> names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

    # Create array of random normally distributed data
    >>> data = np.random.randn(7, 4)
    >>> data
    array([[ 0.0929,  0.2817,  0.769 ,  1.2464],
           [ 1.0072, -1.2962,  0.275 ,  0.2289],
           [ 1.3529,  0.8864, -2.0016, -0.3718],
           [ 1.669 , -0.4386, -0.5397,  0.477 ],
           [ 3.2489, -1.0212, -0.5771,  0.1241],
           [ 0.3026,  0.5238,  0.0009,  1.3438],
           [-0.7135, -0.8312, -2.3702, -1.8608]])


    Now, suppose each name corresponds to a row in the data array, and we want to select
      all the rows with the corresponding name 'Bob'.  Like arithmetic operations, 
      comparisons (ie ==) are also vectorized.  So, comparing names with 'Bob' yields a 
      boolean array.

    >>> names == 'Bob'
    array([True, False, False, True, False, False, False], dtype=bool)


    We can even pass this boolean array in to index the data array.

    # Returns rows 0 and 3, which correspond to 'Bob' in names
    >>> data[names == 'Bob']
    array([[ 0.0929,  0.2817,  0.769 ,  1.2464],
           [ 1.669 , -0.4386, -0.5397,  0.477 ]])

    # Indexes the columns also
    >>> data[names == 'Bob', 2:]
    array([[ 0.769 ,  1.2464],
           [-0.5397,  0.477 ]])

    >>> data[names == 'Bob', 3]
    array([ 1.2464,  0.477 ])


    # To select everything but 'Bob', you can use '!=' or negate the condition using '~'
    >>> data[names != 'Bob']
    array([[ 1.0072, -1.2962,  0.275 ,  0.2289],
           [ 1.3529,  0.8864, -2.0016, -0.3718],
           [ 3.2489, -1.0212, -0.5771,  0.1241],
           [ 0.3026,  0.5238,  0.0009,  1.3438],
           [-0.7135, -0.8312, -2.3702, -1.8608]])

    # This is equivalent
    >>> data[~(names == 'Bob')]

    # This is also equivalent
    >>> cond = names == 'Bob'
    >>> data[~cond]


    # More complex conditions can be used
    >>> mask = (names == 'Bob') | (names == 'Will')
    >>> data[mask]
    array([[ 0.0929,  0.2817,  0.769 ,  1.2464],
           [ 1.3529,  0.8864, -2.0016, -0.3718],
           [ 1.669 , -0.4386, -0.5397,  0.477 ],
           [ 3.2489, -1.0212, -0.5771,  0.1241]])


    # Set values based on any condition
    # Here, set all negative values in data to zero
    >>> data[data < 0] = 0
    >>> data
    array([[ 0.0929,  0.2817,  0.769 ,  1.2464],
           [ 1.0072,  0.    ,  0.275 ,  0.2289],
           [ 1.3529,  0.8864,  0.    ,  0.    ],
           [ 1.669 ,  0.    ,  0.    ,  0.477 ],
           [ 3.2489,  0.    ,  0.    ,  0.1241],
           [ 0.3026,  0.5238,  0.0009,  1.3438],
           [ 0.    ,  0.    ,  0.    ,  0.    ]])



- Fancy Indexing

    'Fancy indexing' is a term used by NumPy to describe indexing using integer arrays.

    # Suppose we create the following array
    >>> arr = np.empty((8, 4))
    >>> for i in range(8): arr[i] = i
    >>> arr
    array([[ 0.,  0.,  0.,  0.],
           [ 1.,  1.,  1.,  1.],
           [ 2.,  2.,  2.,  2.],
           [ 3.,  3.,  3.,  3.],
           [ 4.,  4.,  4.,  4.],
           [ 5.,  5.,  5.,  5.],
           [ 6.,  6.,  6.,  6.],
           [ 7.,  7.,  7.,  7.]])

    # Now, to select a subset of rows in a particular order, you can just pass an array
    #   of indexes in.  Note that fancy indexing always copies into a new array.
    >>> arr[[4, 3, 0, 6]] 
    array([[ 4.,  4.,  4.,  4.],
           [ 3.,  3.,  3.,  3.],
           [ 0.,  0.,  0.,  0.],
           [ 6.,  6.,  6.,  6.]])



- Transposing Arrays and Swapping Axes

    # Transposing returns a view, it does not copy
    >>> arr = np.arange(15).reshape((3, 5))
    >>> arr
    array([[ 0,  1,  2,  3,  4],
           [ 5,  6,  7,  8,  9],
           [10, 11, 12, 13, 14]])

    >>> arr.T
    array([[ 0,  5, 10],
           [ 1,  6, 11],
           [ 2,  7, 12],
           [ 3,  8, 13],
           [ 4,  9, 14]])


    # For higher dimensional arrays, transpose will accept a tuple of axis 
    #   numbers to permute the axes
    >>> arr = np.arange(16).reshape((2, 2, 4))
    >>> arr
    array([[[ 0,  1,  2,  3],
            [ 4,  5,  6,  7]],
           [[ 8,  9, 10, 11],
            [12, 13, 14, 15]]])

    >>> arr.transpose((1, 0, 2))
    array([[[ 0,  1,  2,  3],
            [ 8,  9, 10, 11]],
           [[ 4,  5,  6,  7],
            [12, 13, 14, 15]]])


    # The 'swapaxes' function can swap a given pair of axes in a multidimensional array
    >>> arr.swapaxes(1, 2) 
    array([[[ 0,  4],
            [ 1,  5],
            [ 2,  6],
            [ 3,  7]],
           [[ 8, 12],
            [ 9, 13],
            [10, 14],
            [11, 15]]])



- Universal Functions

    A universal function, or 'ufunc', is a function that performs element-wise operations
      on data in ndarrays.

    >>> arr = np.arange(10)
    >>> arr
    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

    # Unary square root
    >>> np.sqrt(arr)
    array([ 0., 1., 1.4142, 1.7321, 2., 2.2361, 2.4495, 2.6458, 2.8284, 3. ])

    # Unary exponential
    >>> np.exp(arr)
    array([ 1., 2.7183, 7.3891, 20.0855, 54.5982, 148.4132, 403.4288, 1096.6332, 2980.958, 8103.0839])


    # Binary maximum
    >>> x = np.random.randn(8)
    >>> y = np.random.randn(8)

    >>> x 
    array([-0.0119,  1.0048,  1.3272, -0.9193, -1.5491,  0.0222,  0.7584, -0.6605])

    >>> y 
    array([ 0.8626, -0.01  ,  0.05  ,  0.6702,  0.853 , -0.9559, -0.0235, -2.3042])

    >>> np.maximum(x, y)
    array([ 0.8626,  1.0048,  1.3272,  0.6702,  0.853 ,  0.0222,  0.7584, -0.6605])



- List of Unary Ufuncs

    Function	           Description
    --------------------------------------------------------------------------------------
    abs, fabs	             Compute the absolute value element-wise for integer, 
                               floating-point, or complex values

    sqrt	                 Compute the square root of each element (equivalent to arr ** 0.5)

    square	                 Compute the square of each element (equivalent to arr ** 2)

    exp	                     Compute the exponent ex of each element

    log, log10, log2, log1p	 Natural logarithm (base e), log base 10, log base 2, and 
                               log(1 + x), respectively

    sign	                 Compute the sign of each element: 1 (positive), 0 (zero), or –1 (negative)

    ceil	                 Compute the ceiling of each element (i.e., the smallest integer 
                               greater than or equal to that number)

    floor	                 Compute the floor of each element (i.e., the largest integer less 
                               than or equal to each element)

    rint	                 Round elements to the nearest integer, preserving the dtype

    modf	                 Return fractional and integral parts of array as a separate array

    isnan	                 Return boolean array indicating whether each value is NaN (Not a Number)

    isfinite, isinf	         Return boolean array indicating whether each element is finite 
                               (non-inf, non-NaN) or infinite, respectively

    cos, cosh, sin, sinh,    Regular and hyperbolic trigonometric functions
    tan, tanh

    arccos, arccosh,         Inverse trigonometric functions
    arcsin, arcsinh, 
    arctan, arctanh

    logical_not	             Compute truth value of not x element-wise (equivalent to ~arr)



- List of Binary Ufuncs

    Function	         Description
    ----------------------------------------------------------------------------------------
    add	                    Add corresponding elements in arrays

    subtract	            Subtract elements in second array from first array

    multiply	            Multiply array elements

    divide, floor_divide	Divide or floor divide (truncating the remainder)

    power	                Raise elements in first array to powers indicated in second array

    maximum, fmax	        Element-wise maximum; fmax ignores NaN

    minimum, fmin	        Element-wise minimum; fmin ignores NaN

    mod	                    Element-wise modulus (remainder of division)

    copysign	            Copy sign of values in second argument to values in first argument

    greater, greater_equal, Perform element-wise comparison, yielding boolean array (equivalent
    less, less_equal,         to infix operators >, >=, <, <=, ==, !=)
    equal, not_equal

    logical_and,            Compute element-wise truth value of logical operation (equivalent  
    logical_or,               to infix operators & |, ^)
    logical_xor	



- Array-Oriented Programming


- Mathematical and Statistical Methods


- Methods for Boolean Arrays


- Sorting


- Set Operations


- File Input and Output with Arrays


- Linear Algebra


- List of Commonly Used numpy.linalg Functions


- Pseudorandom Number Generation


- List of numpy.random Functions


- Example - Random Walks