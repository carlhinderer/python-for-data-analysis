------------------------------------------------------
CHAPTER 05 - PANDAS BASICS
------------------------------------------------------

- NumPy vs pandas

    The biggest difference between NumPy and pandas is that pandas is designed for 
      working with tabular or heterogenous data, while Numpy is designed to work with 
      homogenous numerical array data.



- pandas Series

    >>> import pandas as pd
    >>> from pandas import Series, DataFrame


    A 'Series' is a 1D array-like object containing a sequence of values and an 
      associated array of data labels, called its 'index'.

    # The simplest series is just an array
    # The defualt index is integers 0 to N-1
    >>> obj = pd.Series([4, 7, -5, 3])
    >>> obj
    0    4
    1    7
    2    -5
    3    3

    >>> obj.index
    RangeIndex(start=0, stop=4, step=1)


    # Create a custom label for each data point
    >>> obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])
    >>> obj2
    d    4
    b    7
    a    -5
    c    3

    >>> obj2.index
    Out[17]: Index(['d', 'b', 'a', 'c'], dtype='object')


    # The labels can be used as indexes
    >>> obj2['a']
    -5
    >>> obj2['d'] = 6

    >>> obj2[['c', 'a', 'd']]
    c    3
    a    -5
    d    6


    # The index-value link is preserved after Numpy or Numpy-like functions are applied
    >>> obj2[obj2 > 0]
    d    6
    b    7
    c    3

    >>> obj2 * 2
    d    12
    b    14
    a    -10
    c    6

    >>> np.exp(obj2)
    d     403.428793
    b    1096.633158
    a       0.006738
    c      20.085537



- Series as Dictionary-like Objects

    Another way to think of a Series is as a fixed-length, ordered dict.  It can be used
      like a dict in many contexts.

    >>> 'b' in obj2
    True

    >>> 'e' in obj2
    False


    # A series can be created from a dict
    # By default the index will put the dict's keys in sorted order
    >>> sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}
    >>> obj3 = pd.Series(sdata)
    >>> obj3 
    Ohio      35000
    Oregon    16000
    Texas     71000
    Utah       5000

    # If you want the keys in a different order, you can specify it in an array
    # Note that 'California' is set to NaN, since its not in the original data set
    >>> states = ['California', 'Ohio', 'Oregon', 'Texas']
    >>> obj4 = pd.Series(sdata, index=states)
    >>> obj4
    California        NaN
    Ohio          35000.0
    Oregon        16000.0
    Texas         71000.0


    # Both the series itself and its index have a name attribute
    >>> obj4.name = 'population'
    >>> obj4.index.name = 'state'
    >>> obj4
    state
    California        NaN
    Ohio          35000.0
    Oregon        16000.0
    Texas         71000.0
    Name: population, dtype: float64


    # Note that the index values can also be changed using in-place assignment
    >>> obj4.index = ['Ohio', 'Michigan', 'Indiana', 'Illinois']



- Checking for Missing Data in Series

    # The 'isnull' method checks for missing data
    >>> pd.isnull(obj4)
    California     True
    Ohio          False
    Oregon        False
    Texas         False
    dtype: bool

    # The instance method will return the same results
    >>> obj4.isnull()


    # The 'notnull' method checks for data that is present
    >>> pd.notnull(obj4)
    California    False
    Ohio           True
    Oregon         True
    Texas          True
    dtype: bool

    # There is an instance method for 'notnull' also
    >>> obj4.notnull()