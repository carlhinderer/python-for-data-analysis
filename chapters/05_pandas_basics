------------------------------------------------------
CHAPTER 05 - PANDAS BASICS
------------------------------------------------------

- NumPy vs pandas

    The biggest difference between NumPy and pandas is that pandas is designed for 
      working with tabular or heterogenous data, while Numpy is designed to work with 
      homogenous numerical array data.



- pandas Series

    >>> import pandas as pd
    >>> from pandas import Series, DataFrame


    A 'Series' is a 1D array-like object containing a sequence of values and an 
      associated array of data labels, called its 'index'.

    # The simplest series is just an array
    # The defualt index is integers 0 to N-1
    >>> obj = pd.Series([4, 7, -5, 3])
    >>> obj
    0    4
    1    7
    2    -5
    3    3

    >>> obj.index
    RangeIndex(start=0, stop=4, step=1)


    # Create a custom label for each data point
    >>> obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])
    >>> obj2
    d    4
    b    7
    a    -5
    c    3

    >>> obj2.index
    Out[17]: Index(['d', 'b', 'a', 'c'], dtype='object')


    # The labels can be used as indexes
    >>> obj2['a']
    -5
    >>> obj2['d'] = 6

    >>> obj2[['c', 'a', 'd']]
    c    3
    a    -5
    d    6


    # The index-value link is preserved after Numpy or Numpy-like functions are applied
    >>> obj2[obj2 > 0]
    d    6
    b    7
    c    3

    >>> obj2 * 2
    d    12
    b    14
    a    -10
    c    6

    >>> np.exp(obj2)
    d     403.428793
    b    1096.633158
    a       0.006738
    c      20.085537



- Series as Dictionary-like Objects

    Another way to think of a Series is as a fixed-length, ordered dict.  It can be used
      like a dict in many contexts.

    >>> 'b' in obj2
    True

    >>> 'e' in obj2
    False


    # A series can be created from a dict
    # By default the index will put the dict's keys in sorted order
    >>> sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}
    >>> obj3 = pd.Series(sdata)
    >>> obj3 
    Ohio      35000
    Oregon    16000
    Texas     71000
    Utah       5000

    # If you want the keys in a different order, you can specify it in an array
    # Note that 'California' is set to NaN, since its not in the original data set
    >>> states = ['California', 'Ohio', 'Oregon', 'Texas']
    >>> obj4 = pd.Series(sdata, index=states)
    >>> obj4
    California        NaN
    Ohio          35000.0
    Oregon        16000.0
    Texas         71000.0


    # Both the series itself and its index have a name attribute
    >>> obj4.name = 'population'
    >>> obj4.index.name = 'state'
    >>> obj4
    state
    California        NaN
    Ohio          35000.0
    Oregon        16000.0
    Texas         71000.0
    Name: population, dtype: float64


    # Note that the index values can also be changed using in-place assignment
    >>> obj4.index = ['Ohio', 'Michigan', 'Indiana', 'Illinois']



- Checking for Missing Data in Series

    # The 'isnull' method checks for missing data
    >>> pd.isnull(obj4)
    California     True
    Ohio          False
    Oregon        False
    Texas         False
    dtype: bool

    # The instance method will return the same results
    >>> obj4.isnull()


    # The 'notnull' method checks for data that is present
    >>> pd.notnull(obj4)
    California    False
    Ohio           True
    Oregon         True
    Texas          True
    dtype: bool

    # There is an instance method for 'notnull' also
    >>> obj4.notnull()



- pandas DataFrames

    A DataFrame represents a rectangular table of data and contains an ordered
      colleciton of columns, each of which can be a different data type.


    # One of the most common ways to construct a DataSet is from a dict of
    #   equal length lists or NumPy arrays
    >>> data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],
                'year': [2000, 2001, 2002, 2001, 2002, 2003],
                'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}

    >>> frame = pd.DataFrame(data)


    # For large data frames, the 'head' method will select only the first 5 rows
    >>> frame.head()

    # If you specify a sequence of columns, the DataFrame's columns will be arranged
    #   in that order.  If you pass in a column that isn't contained in the dict, it will 
    #   appear with missing values in the result.
    >>> pd.DataFrame(data, columns=['year', 'state', 'pop'])



- Column and Row Access in DataFrames
    
    # Columns in the DataFrame can be retrieved as a Series by attribute
    >>> frame['state']
    >>> frame.state
    one        Ohio
    two        Ohio
    three      Ohio
    four     Nevada
    five     Nevada
    six      Nevada
    Name: state, dtype: object

    # Rows can be retrieved either by position or with the 'loc' attribute
    >>> frame.loc['three']
    year     2002
    state    Ohio
    pop       3.6
    debt      NaN
    Name: three, dtype: object


    # Assign an entire column with a value, assigning a column that doesn't exist
    #   will create a new column
    >>> frame['debt'] = 16.5

    # The 'del' keyword will delete an entire column, as with a dict
    >>> del frame['debt']



- Other Ways to Create DataFrames

    # Using a nested dict of dicts is a common way to create a DataSet.  By default, pandas
    #   will assume the outer dict is the columns and the inner dicts are the rows.
    >>> pop = {'Nevada': {2001: 2.4, 2002: 2.9},
               'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}}
    >>> frame3 = pd.DataFrame(pop)
    >>> frame3
          Nevada  Ohio
    2000     NaN   1.5
    2001     2.4   1.7
    2002     2.9   3.6


    # To switch the rows and columns, just take the transpose
    >>> frame3.T
            2000  2001  2002
    Nevada   NaN   2.4   2.9
    Ohio     1.5   1.7   3.6


    # The index and columns have 'name' attributes which will also be displayed
    >>> frame3.index.name = 'Year'
    >>> frame3.columns.name = 'State'


    # The 'values' attributes returns the data contained in the DataFrame as a 2D ndarray
    >>> frame3.values
    array([[ nan,  1.5],
           [ 2.4,  1.7],
           [ 2.9,  3.6]])



- List of Possible Data Inputs to the DataFrame Constructor

    2D ndarray
    	A matrix of data, passing optional row and column labels
    
    dict of arrays, lists, or tuples
    	Each sequence becomes a column in the DataFrame; all sequences must be the same length
    
    NumPy structured/record array
    	Treated as the “dict of arrays” case
    
    dict of Series
    	Each value becomes a column; indexes from each Series are unioned together to form the 
    	  result’s row index if no explicit index is passed
    
    dict of dicts
    	Each inner dict becomes a column; keys are unioned to form the row index as in the 
    	  “dict of Series” case
    
    List of dicts or Series
    	Each item becomes a row in the DataFrame; union of dict keys or Series indexes become 
    	    the DataFrame’s column labels
    
    List of lists or tuples
    	Treated as the “2D ndarray” case
    
    Another DataFrame
    	The DataFrame’s indexes are used unless different ones are passed
    
    NumPy MaskedArray
    	Like the “2D ndarray” case except masked values become NA/missing in the DataFrame result



- Index Objects

    pandas's Index objects are responsible for holding the axis labels and other metadata.

    >>> obj = pd.Series(range(3), index=['a', 'b', 'c'])
    >>> obj.index
    Index(['a', 'b', 'c'], dtype='object')

    # Index objects are immutable
    >>> obj.index[1] = 'd'
    TypeError


    # Basic array operations can be used on indexes
    >>> frame3.columns
    Index(['Nevada', 'Ohio'], dtype='object', name='state')

    >>> 'Ohio' in frame3.columns
    True

    >>> 2003 in frame3.index
    False



- Reindexing Series

    The 'reindex' method is an important operation on pandas objects.

    # Create a Series
    >>> obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])
    >>> obj 
    d    4.5
    b    7.2
    a   -5.3
    c    3.6
    dtype: float64

    # Reindexing the Series rearranges the data according to the new index
    >>> obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])
    >>> obj2
    a   -5.3
    b    7.2
    c    3.6
    d    4.5
    e    NaN
    dtype: float64


    # You can also fill in values automatically when reindexing
    >>> obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])
    >>> obj3
    0      blue
    2    purple
    4    yellow
    dtype: object

    >>> obj3.reindex(range(6), method='ffill') 
    0      blue
    1      blue
    2    purple
    3    purple
    4    yellow
    5    yellow
    dtype: object



- Reindexing DataFrames

    With DataFrames, 'reindex' can alter the row index, the column index, or both.

    # Create a DataFrame
    >>> frame = pd.DataFrame(np.arange(9).reshape((3, 3)),
                             index=['a', 'c', 'd'],
                             columns=['Ohio', 'Texas', 'California'])
    >>> frame 

       Ohio  Texas  California
    a     0      1           2
    c     3      4           5
    d     6      7           8


    # By default, the 'reindex' method will reindex the rows
    >>> frame2 = frame.reindex(['a', 'b', 'c', 'd'])
    >>> frame2

       Ohio  Texas  California
    a   0.0    1.0         2.0
    b   NaN    NaN         NaN
    c   3.0    4.0         5.0
    d   6.0    7.0         8.0


    # The columns can be reindexed
    >>> states = ['Texas', 'Utah', 'California']
    >>> frame.reindex(columns=states)

       Texas  Utah  California
    a      1   NaN           2
    c      4   NaN           5
    d      7   NaN           8


    # Reindexing can be done more succinctly by label-indexing with 'loc'
    >>> frame.loc[['a', 'b', 'c', 'd'], states]

       Texas  Utah  California
    a    1.0   NaN         2.0
    b    NaN   NaN         NaN
    c    4.0   NaN         5.0
    d    7.0   NaN         8.0



- Dropping Entries from an Axis

    The 'drop' method will return a new object with the indicated value or values deleted
      from an axis.  

    # Create a series
    >>> obj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])
    >>> obj
 
    a    0.0
    b    1.0
    c    2.0
    d    3.0
    e    4.0
    dtype: float64

    # Drop rows from the series
    >>> new_obj = obj.drop(['d', 'c'])
    >>> new_obj

    a    0.0
    b    1.0
    e    4.0
    dtype: float64


    With DataFrames, index values can be deleted from either axis.

    # Create a DataFrame
    >>> data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                            index=['Ohio', 'Colorado', 'Utah', 'New York'],
                            columns=['one', 'two', 'three', 'four'])
    >>> data
 
              one  two  three  four
    Ohio        0    1      2     3
    Colorado    4    5      6     7
    Utah        8    9     10    11
    New York   12   13     14    15

    # Calling 'drop' with a sequence of labels will drop values from the row labels
    >>> data.drop(['Colorado', 'Ohio'])

              one  two  three  four
    Utah        8    9     10    11
    New York   12   13     14    15