------------------------------------------------------
CHAPTER 03 - BUILT-IN DATA STRUCTURES
------------------------------------------------------

- The 'bisect' Module

    The built-in 'bisect' module implements binary search and insertion into a sorted
      list.  Note that to save time, it doesn't check whether the list is sorted, so that
      is the client's responsiblity.

      In [1]: import bisect
      In [2]: c = [1, 2, 2, 2, 3, 4, 7]

      In [3]: bisect.bisect(c, 2)
      4

      In [4]: bisect.insert(c, 6)
      In [5]: c
      [1, 2, 2, 2, 3, 4, 6, 7]



- Sequence Type Operations

    # The 'reversed' function iterates over a sequence in reverse order
    >>> list(reversed(range(10)))
    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]


    # Create a dictionary from a sequence
    >>> mapping = dict(zip(range(5), reversed(range(5))))
    >>> mapping
    {0: 4, 1: 3, 2: 2, 3: 1, 4: 0}


    # The 'hash' method will return the hash code of any object
    >>> hash('string')
    -305472831944956388



- Currying Arguments

    Currying (named after Haskell Curry) means deriving new functions from existing ones
      using partial argument application.

    # Create a function
    >>> def add_numbers(x, y):
            return x+y

    # Create a new function using the first parameter.
    # The second parameter is then said to be 'curried'.
    >>> add_five = lambda y: add_numbers(5, y)


    # Alternatively, we can use the 'functools' module to make this even easier.
    >>> from functools import partial
    >>> add_five = partial(add_numbers, 5)



- The 'itertools' module

    The 'itertools' module contains a collection of generators for common data algorithms.
      For example, the 'groupby' function takes any sequence and a function, 
      grouping consecutive elements in the sequence by return value of the function.


    >>> import itertools

    # Create a function to group by
    >>> first_letter = lambda x: x[0]

    # Create a sequence
    >>> names = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Tom']

    # Iterate over the results
    >>> for letter, names in itertools.groupby(names, first_letter):
            print(letter, list(names))

    A ['Alan', 'Adam']
    W ['Wes', 'Will']
    A ['Albert']
    T ['Tom']


    Other useful itertools functions:

    combinations(iterable, k)	Generates a sequence of all possible k-tuples of elements 
                                  in the iterable, ignoring order and without replacement 
                                  (see also the companion function combinations_with_replacement)

    permutations(iterable, k)	Generates a sequence of all possible k-tuples of elements 
                                  in the iterable, respecting order

    groupby(iterable[, keyfunc])	Generates (key, sub-iterator) for each unique key

    product(*iterables, repeat=1)	Generates the Cartesian product of the input iterables as 
                                      tuples, similar to a nested for loop