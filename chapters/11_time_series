------------------------------------------------------
CHAPTER 11 - TIME SERIES
------------------------------------------------------

- Time Series Data

    Many time series are 'fixed frequency', which is to say that data points occur at
      regular intervals according to some rule.  Time series can also be 'irregular',
      without a fixed unit of time or offset between units.  The time series data may
      have one of the following:

      1. Timestamps = specific instants in time, this is the most widely used

      2. Fixed Periods = ie the month January 2007 or the full year 2010

      3. Intervals of Time = indicated by start and end timestamps, periods are a 
                             special case of intervals

      4. Elapsed Time = each timestamp is a measure relative to a particular start time



- Python Date and Time Types

    # 'datetime' stores both the date and time down to the microsecond
    >>> from datetime import datetime
    >>> now = datetime.now()
    >>> now
    datetime.datetime(2017, 10, 17, 13, 34, 33, 597499)

    >>> now.year, now.month, now.day
    (2017, 10, 17)


    # 'timedelta' stores the difference between 2 datetimes
    >>> delta = datetime(2011, 1, 7) - datetime(2008, 6, 24, 8, 15)
    >>> delta
    datetime.timedelta(926, 56700)

    >>> delta.days
    926

    >> delta.seconds
    56700


    # We can add or subtract a 'timedelta' or multiples of them to a datetime
    >>> from datetime import timedelta
    >>> start = datetime(2011, 1, 7)
    >>> start + timedelta(12)
    datetime.datetime(2011, 1, 19, 0, 0)

    >>> start - 2 * timedelta(12)
    datetime.datetime(2010, 12, 14, 0, 0)



- List of Types in 'datetime' Module

    Type	    Description
    -----------------------------------------------------------------------------------
    date	    Store calendar date (year, month, day) using the Gregorian calendar

    time	    Store time of day as hours, minutes, seconds, and microseconds

    datetime	Stores both date and time

    timedelta	Represents the difference between two datetime values 
                  (as days, seconds, and microseconds)

    tzinfo	    Base type for storing time zone information



- Formatting Datetimes

    Both 'datetime' objects and pandas 'Timestamp' objects can be formatted using the
      'str' or the 'strftime' methods.


    >>> stamp = datetime(2011, 1, 3)
    >>> str(stamp)
    '2011-01-03 00:00:00'

    >>> stamp.strftime('%Y-%m-%d')
    '2011-01-03'



- Datetime format specification (ISO C89 compatible)

    Type	Description
    -------------------------------------------------------------------------------
    %Y	    Four-digit year
    %y	    Two-digit year
    %m	    Two-digit month [01, 12]
    %d	    Two-digit day [01, 31]

    %H	    Hour (24-hour clock) [00, 23]
    %I	    Hour (12-hour clock) [01, 12]
    %M	    Two-digit minute [00, 59]
    %S	    Second [00, 61] (seconds 60, 61 account for leap seconds)

    %w	    Weekday as integer [0 (Sunday), 6]
    %U	    Week number of the year [00, 53]; Sunday is considered the first day 
              of the week, and days before the first Sunday of the year are “week 0”
    %W	    Week number of the year [00, 53]; Monday is considered the first day of 
              the week, and days before the first Monday of the year are “week 0”

    %z	    UTC time zone offset as +HHMM or -HHMM; empty if time zone naive
    %F	    Shortcut for %Y-%m-%d (e.g., 2012-4-18)
    %D	    Shortcut for %m/%d/%y (e.g., 04/18/12)



- Parsing Datetimes

    The 'strptime' method can be used to convert strings to dates.  It is a good way to
      parse a date with a known format.


    >>> value = '2011-01-03
    >>> datetime.strptime(value, '%Y-%m-%d')
    datetime.datetime(2011, 1, 3, 0, 0)

    >>> datestrs = ['7/6/2011', '8/6/2011']
    >>> [datetime.strptime(x, '%m/%d/%Y') for x in datestrs]
    [datetime.datetime(2011, 7, 6, 0, 0), datetime.datetime(2011, 8, 6, 0, 0)]



- Using the 'dateutil.parser'

    It can be annoying to write out the date format each time with 'strptime', especially for
      common date formats.  In this case, we can use the 'parser.parse' method in the 'dateutil'
      package (automatically installed when pandas is installed).


    >>> from dateutils.parser import parse
    >>> parse('2011-01-03')
    datetime.datetime(2011, 1, 3, 0, 0)


    # 'dateutil' can parse most human-intelligible date representations
    >>> parse('Jan 31, 1997 10:45 PM')
    datetime.datetime(1997, 1, 31, 22, 45)

    # Pass 'dayfirst=True' for international locales
    >>> parse('6/12/2011', dayfirst=True)
    datetime.datetime(2011, 12, 6, 0, 0)



- pandas Datetimes

    pandas is generally oriented toward working with arrays of dates, whether used as an
      axis index or a column in a DataFrame.  The 'to_datetime' method parses many 
      different kinds of date representations.


    >>> datestrs = ['2011-07-06 12:00:00', '2011-08-06 00:00:00']
    >>> pd.to_datetime(datestrs)

    DatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00'], 
                  dtype='datetime64[ns]', freq=None)


    # pandas also handles values that should be considered missing 
    #   (NaT is pandas's null value for timestamp data)
    >>> idx = pd.to_datetime(datestrs + [None])
    >>> idx

    DatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00', 'NaT'], 
                  dtype='datetime64[ns]', freq=None)

    >>> idx[2]
    NaT

    >>> pd.isnull(idx)
    array([False, False,  True], dtype=bool)



- Locale-specific Date Formatting

    'datetime' objects also have a number of locale-specific formatting options for 
      systems in other countries or languages.  For example, abbreviated month names
      will be different in French or German from English.


    Type	Description
    -----------------------------------------------------------------------------
    %a	    Abbreviated weekday name

    %A	    Full weekday name

    %b	    Abbreviated month name

    %B	    Full month name

    %c	    Full date and time (e.g., ‘Tue 01 May 2012 04:20:57 PM’)

    %p	    Locale equivalent of AM or PM

    %x	    Locale-appropriate formatted date (e.g., in the United States, 
              May 1, 2012 yields ’05/01/2012’)

    %X	    Locale-appropriate time (e.g., ’04:24:12 PM’)



- Time Series Basics

    A basic kind of time series in pandas is a Series indexed by timestamps, which is
      often represented external to pandas as Python strings or 'datetime' objects.


    # Create a time series object
    >>> from datetime import datetime
    >>> dates = [datetime(2011, 1, 2), datetime(2011, 1, 5), datetime(2011, 1, 7), 
                 datetime(2011, 1, 8), datetime(2011, 1, 10), datetime(2011, 1, 12)]

    >>> ts = pd.Series(np.random.randn(6), index=dates)
    >>> ts

    2011-01-02   -0.204708
    2011-01-05    0.478943
    2011-01-07   -0.519439
    2011-01-08   -0.555730
    2011-01-10    1.965781
    2011-01-12    1.393406
    dtype: float64


    # Under the hood, these 'datetime' objects have been put in a 'DatetimeIndex'
    >>> ts.index
    DatetimeIndex(['2011-01-02', '2011-01-05', '2011-01-07', 
                   '2011-01-08', '2011-01-10', '2011-01-12'],
                  dtype='datetime64[ns]', freq=None)


    # Like any other Series, arithmetic operations between differently indexed time series
    #   automatically align on the dates.
    >>> ts + ts[::2]

    2011-01-02   -0.409415
    2011-01-05         NaN
    2011-01-07   -1.038877
    2011-01-08         NaN
    2011-01-10    3.931561
    2011-01-12         NaN
    dtype: float64


    # pandas stores timestamps using NumPy's 'datetime64' data type at the ns resolution
    >>> ts.index.dtype
    dtype('<M8[ns]')


    # Scalar values from a DatetimeIndex are pandas Timestamp objects.
    >>> stamp = ts.index[0]
    >>> stamp
    Timestamp('2011-01-02 00:00:00')


    A Timestamp can be substituted anywhere you would use a datetime object. Additionally, 
      it can store frequency information (if any) and understands how to do time zone 
      conversions and other kinds of manipulations.



- Indexing, Selection, and Subsetting

    Time series behaves like any other Series object when indexing and select data by 
      label.  

    >>> stamp = ts.index[2]
    >>> ts[stamp]
    -0.51943871505673811


    # As a convenience, you can also pass a string that is interpretable as a date.
    >>> ts['1/10/2011']
    1.9657805725027142

    >>> ts['20110110']
    1.9657805725027142


    # For longer time series, a year or only a year and month can be passed to 
    #   easily select slices of data.

    >>> longer_ts = pd.Series(np.random.randn(1000), 
                              index=pd.date_range('1/1/2000', periods=1000))
    >>> longer_ts

    2000-01-01    0.092908
    2000-01-02    0.281746
    2000-01-03    0.769023
    2000-01-04    1.246435
    2000-01-05    1.007189
    2000-01-06   -1.296221
    2000-01-07    0.274992
    2000-01-08    0.228913
    2000-01-09    1.352917
    2000-01-10    0.886429
                    ...
    2002-09-17   -0.139298
    2002-09-18   -1.159926
    2002-09-19    0.618965
    2002-09-20    1.373890
    2002-09-21   -0.983505
    2002-09-22    0.930944
    2002-09-23   -0.811676
    2002-09-24   -1.830156
    2002-09-25   -0.138730
    2002-09-26    0.334088
    Freq: D, Length: 1000, dtype: float64
    

    # Here, the string '2001' is interpreted as a year and selects the time period
    >>> longer_ts['2001']

    2001-01-01    1.599534
    2001-01-02    0.474071
    2001-01-03    0.151326
    2001-01-04   -0.542173
    2001-01-05   -0.475496
    2001-01-06    0.106403
    2001-01-07   -1.308228
    2001-01-08    2.173185
    2001-01-09    0.564561
    2001-01-10   -0.190481
                    ...   
    Freq: D, Length: 365, dtype: float64


    # This also works if we specify the month
    >>> longer_ts['2001-05']

    2001-05-01   -0.622547
    2001-05-02    0.936289
    2001-05-03    0.750018
    2001-05-04   -0.056715
    2001-05-05    2.300675
    2001-05-06    0.569497
    2001-05-07    1.489410
    2001-05-08    1.264250
    2001-05-09   -0.761837
    2001-05-10   -0.331617
                    ...
    Freq: D, Length: 31, dtype: float64



- Slicing With Datetimes and Timestamps

    # Slicing with datetime objects works as well
    >>> ts[datetime(2011, 1, 7):]

    2011-01-07   -0.519439
    2011-01-08   -0.555730
    2011-01-10    1.965781
    2011-01-12    1.393406
    dtype: float64
    

    # Because most time series data is ordered chronologically, you can slice with 
    #   timestamps not contained in a time series to perform a range query.
    >>> ts

    2011-01-02   -0.204708
    2011-01-05    0.478943
    2011-01-07   -0.519439
    2011-01-08   -0.555730
    2011-01-10    1.965781
    2011-01-12    1.393406
    dtype: float64
    
    >>> ts['1/6/2011':'1/11/2011']

    2011-01-07   -0.519439
    2011-01-08   -0.555730
    2011-01-10    1.965781
    dtype: float64


    # The instance method 'truncate' has additional options for slicing a Series 
    #   between 2 dates
    >>> ts.truncate(after='1/9/2011')

    2011-01-02   -0.204708
    2011-01-05    0.478943
    2011-01-07   -0.519439
    2011-01-08   -0.555730
    dtype: float64


    # All of this holds true for DataFrame as well, indexing on its rows
    >>> dates = pd.date_range('1/1/2000', periods=100, freq='W-WED')
    >>> long_df = pd.DataFrame(np.random.randn(100, 4), 
                               index=dates,
                               columns=['Colorado', 'Texas', 'New York', 'Ohio'])

    >>> long_df.loc['5-2001']

                Colorado     Texas  New York      Ohio
    2001-05-02 -0.006045  0.490094 -0.277186 -0.707213
    2001-05-09 -0.560107  2.735527  0.927335  1.513906
    2001-05-16  0.538600  1.273768  0.667876 -0.969206
    2001-05-23  1.676091 -0.817649  0.050188  1.951312
    2001-05-30  3.260383  0.963301  1.201206 -1.852001



- Time Series With Duplicate Indices

    # In some applications, there may be multiple data observations falling on a 
    #   particular timestamp.

    >>> dates = pd.DatetimeIndex(['1/1/2000', '1/2/2000', '1/2/2000', '1/2/2000', '1/3/2000'])
    >>> dup_ts = pd.Series(np.arange(5), index=dates)
    >>> dup_ts

    2000-01-01    0
    2000-01-02    1
    2000-01-02    2
    2000-01-02    3
    2000-01-03    4
    dtype: int64


    # We can tell that the index is not unique by checking its is_unique property
    >>> dup_ts.index.is_unique
    False


    # Indexing into this time series will now either produce scalar values or slices depending 
    #   on whether a timestamp is duplicated.

    >>> dup_ts['1/3/2000']  # not duplicated
    4

    >>> dup_ts['1/2/2000']  # duplicated
    2000-01-02    1
    2000-01-02    2
    2000-01-02    3
    dtype: int64


    # Suppose you wanted to aggregate the data having non-unique timestamps. One way to do 
    #   this is to use groupby and pass 'level=0'
    >>> grouped = dup_ts.groupby(level=0)
    >>> grouped.mean()
    
    2000-01-01    0
    2000-01-02    2
    2000-01-03    4
    dtype: int64

    >>> grouped.count()

    2000-01-01    1
    2000-01-02    3
    2000-01-03    1
    dtype: int64