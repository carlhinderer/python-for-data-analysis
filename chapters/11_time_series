------------------------------------------------------
CHAPTER 11 - TIME SERIES
------------------------------------------------------

- Time Series Data

    Many time series are 'fixed frequency', which is to say that data points occur at
      regular intervals according to some rule.  Time series can also be 'irregular',
      without a fixed unit of time or offset between units.  The time series data may
      have one of the following:

      1. Timestamps = specific instants in time, this is the most widely used

      2. Fixed Periods = ie the month January 2007 or the full year 2010

      3. Intervals of Time = indicated by start and end timestamps, periods are a 
                             special case of intervals

      4. Elapsed Time = each timestamp is a measure relative to a particular start time



- Python Date and Time Types

    # 'datetime' stores both the date and time down to the microsecond
    >>> from datetime import datetime
    >>> now = datetime.now()
    >>> now
    datetime.datetime(2017, 10, 17, 13, 34, 33, 597499)

    >>> now.year, now.month, now.day
    (2017, 10, 17)


    # 'timedelta' stores the difference between 2 datetimes
    >>> delta = datetime(2011, 1, 7) - datetime(2008, 6, 24, 8, 15)
    >>> delta
    datetime.timedelta(926, 56700)

    >>> delta.days
    926

    >> delta.seconds
    56700


    # We can add or subtract a 'timedelta' or multiples of them to a datetime
    >>> from datetime import timedelta
    >>> start = datetime(2011, 1, 7)
    >>> start + timedelta(12)
    datetime.datetime(2011, 1, 19, 0, 0)

    >>> start - 2 * timedelta(12)
    datetime.datetime(2010, 12, 14, 0, 0)



- List of Types in 'datetime' Module

    Type	    Description
    -----------------------------------------------------------------------------------
    date	    Store calendar date (year, month, day) using the Gregorian calendar

    time	    Store time of day as hours, minutes, seconds, and microseconds

    datetime	Stores both date and time

    timedelta	Represents the difference between two datetime values 
                  (as days, seconds, and microseconds)

    tzinfo	    Base type for storing time zone information



- Formatting Datetimes

    Both 'datetime' objects and pandas 'Timestamp' objects can be formatted using the
      'str' or the 'strftime' methods.


    >>> stamp = datetime(2011, 1, 3)
    >>> str(stamp)
    '2011-01-03 00:00:00'

    >>> stamp.strftime('%Y-%m-%d')
    '2011-01-03'



- Datetime format specification (ISO C89 compatible)

    Type	Description
    -------------------------------------------------------------------------------
    %Y	    Four-digit year
    %y	    Two-digit year
    %m	    Two-digit month [01, 12]
    %d	    Two-digit day [01, 31]

    %H	    Hour (24-hour clock) [00, 23]
    %I	    Hour (12-hour clock) [01, 12]
    %M	    Two-digit minute [00, 59]
    %S	    Second [00, 61] (seconds 60, 61 account for leap seconds)

    %w	    Weekday as integer [0 (Sunday), 6]
    %U	    Week number of the year [00, 53]; Sunday is considered the first day 
              of the week, and days before the first Sunday of the year are “week 0”
    %W	    Week number of the year [00, 53]; Monday is considered the first day of 
              the week, and days before the first Monday of the year are “week 0”

    %z	    UTC time zone offset as +HHMM or -HHMM; empty if time zone naive
    %F	    Shortcut for %Y-%m-%d (e.g., 2012-4-18)
    %D	    Shortcut for %m/%d/%y (e.g., 04/18/12)



- Parsing Datetimes

    The 'strptime' method can be used to convert strings to dates.  It is a good way to
      parse a date with a known format.


    >>> value = '2011-01-03
    >>> datetime.strptime(value, '%Y-%m-%d')
    datetime.datetime(2011, 1, 3, 0, 0)

    >>> datestrs = ['7/6/2011', '8/6/2011']
    >>> [datetime.strptime(x, '%m/%d/%Y') for x in datestrs]
    [datetime.datetime(2011, 7, 6, 0, 0), datetime.datetime(2011, 8, 6, 0, 0)]



- Using the 'dateutil.parser'

    It can be annoying to write out the date format each time with 'strptime', especially for
      common date formats.  In this case, we can use the 'parser.parse' method in the 'dateutil'
      package (automatically installed when pandas is installed).


    >>> from dateutils.parser import parse
    >>> parse('2011-01-03')
    datetime.datetime(2011, 1, 3, 0, 0)


    # 'dateutil' can parse most human-intelligible date representations
    >>> parse('Jan 31, 1997 10:45 PM')
    datetime.datetime(1997, 1, 31, 22, 45)

    # Pass 'dayfirst=True' for international locales
    >>> parse('6/12/2011', dayfirst=True)
    datetime.datetime(2011, 12, 6, 0, 0)



- pandas Datetimes

    pandas is generally oriented toward working with arrays of dates, whether used as an
      axis index or a column in a DataFrame.  The 'to_datetime' method parses many 
      different kinds of date representations.


    >>> datestrs = ['2011-07-06 12:00:00', '2011-08-06 00:00:00']
    >>> pd.to_datetime(datestrs)

    DatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00'], 
                  dtype='datetime64[ns]', freq=None)


    # pandas also handles values that should be considered missing 
    #   (NaT is pandas's null value for timestamp data)
    >>> idx = pd.to_datetime(datestrs + [None])
    >>> idx

    DatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00', 'NaT'], 
                  dtype='datetime64[ns]', freq=None)

    >>> idx[2]
    NaT

    >>> pd.isnull(idx)
    array([False, False,  True], dtype=bool)



- Locale-specific Date Formatting

    'datetime' objects also have a number of locale-specific formatting options for 
      systems in other countries or languages.  For example, abbreviated month names
      will be different in French or German from English.


    Type	Description
    -----------------------------------------------------------------------------
    %a	    Abbreviated weekday name

    %A	    Full weekday name

    %b	    Abbreviated month name

    %B	    Full month name

    %c	    Full date and time (e.g., ‘Tue 01 May 2012 04:20:57 PM’)

    %p	    Locale equivalent of AM or PM

    %x	    Locale-appropriate formatted date (e.g., in the United States, 
              May 1, 2012 yields ’05/01/2012’)

    %X	    Locale-appropriate time (e.g., ’04:24:12 PM’)



- Time Series Basics

    A basic kind of time series in pandas is a Series indexed by timestamps, which is
      often represented external to pandas as Python strings or 'datetime' objects.


    # Create a time series object
    >>> from datetime import datetime
    >>> dates = [datetime(2011, 1, 2), datetime(2011, 1, 5), datetime(2011, 1, 7), 
                 datetime(2011, 1, 8), datetime(2011, 1, 10), datetime(2011, 1, 12)]

    >>> ts = pd.Series(np.random.randn(6), index=dates)
    >>> ts

    2011-01-02   -0.204708
    2011-01-05    0.478943
    2011-01-07   -0.519439
    2011-01-08   -0.555730
    2011-01-10    1.965781
    2011-01-12    1.393406
    dtype: float64


    # Under the hood, these 'datetime' objects have been put in a 'DatetimeIndex'
    >>> ts.index
    DatetimeIndex(['2011-01-02', '2011-01-05', '2011-01-07', 
                   '2011-01-08', '2011-01-10', '2011-01-12'],
                  dtype='datetime64[ns]', freq=None)


    # Like any other Series, arithmetic operations between differently indexed time series
    #   automatically align on the dates.
    >>> ts + ts[::2]

    2011-01-02   -0.409415
    2011-01-05         NaN
    2011-01-07   -1.038877
    2011-01-08         NaN
    2011-01-10    3.931561
    2011-01-12         NaN
    dtype: float64


    # 