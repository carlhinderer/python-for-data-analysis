------------------------------------------------------
CHAPTER 09 - PLOTTING AND VISUALIZATION
------------------------------------------------------

- matplotlib

    matplotlib is a desktop plotting package designed for creating (mostly 2D) 
      publication-quality plots.  The project was started in 2002 by John Hunter to 
      enable MATLAB-like plotting in Python.

    Plots can be exported to all the common vector and raster graphics formats
      (PDF, SVG, JPG, PNG, BMP, GIF, etc.)


    # Standard import convention
    >>> import matplotlib.pyplot as plt

    # IPython command for interactive plots
    >>> %matplotlib

    # Jupyter command for interactive plots
    >>> %matplotlib notebook

    # Or
    >>> %matplotlib inline



- Simple Line Plot

    # Plot a straight line
    >>> import numpy as np
    >>> data = np.arange(10)
    >>> plt.plot(data)



- Figures and Subplots

    Plots in matplotlib reside within a 'Figure' object.  Any number of subplots
      can be added to a Figure.

    # Create a figure
    >>> fig = plt.figure()

    # Make the figure 2x2, and add this subplot in the first position
    >>> ax1 = fig.add_subplot(2, 2, 1)

    # Create subplots in the 2nd and 3rd positions
    >>> ax2 = fig.add_subplot(2, 2, 2)
    >>> ax3 = fig.add_subplot(2, 2, 3)


    # Note that in Jupyter notebooks, the plots are reset after each cell is evaluated,
    #   so all of the commands for a figure must be in the same cell.


    # When a command like plt.plot() is issued, matplot draws on the last figure and
    #   subplot used, to the figure and subplot creation is hidden.  This will plot
    #   a line in the 3rd subplot.  Note that the 'k--' is a style parameter that will
    #   cause a dashed black line to be used.
    >>> plt.plot(np.random.randn(50).cumsum(), 'k--'')


    # The 'fig.add_subplot' returns an 'AxesSubplot' object that can be directly plotted on.
    >>> ax1.hist(np.random.randn(100), bins=20, color='k', alpha=0.3)
    >>> ax2.scatter(np.arange(30), np.arange(30) + 3 * np.random.randn(30))


    # The 'plt.subplots' method creates a new figure and returns a numpy array of the
    #   created subplot objects.
    >>> fig, axes = plt.subplots(2, 3)
    >>> axes

    array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f435346c668>,
            <matplotlib.axes._subplots.AxesSubplot object at 0x7f435338c780>,
            <matplotlib.axes._subplots.AxesSubplot object at 0x7f43533c37f0>],
       [    <matplotlib.axes._subplots.AxesSubplot object at 0x7f435337d8d0>,
            <matplotlib.axes._subplots.AxesSubplot object at 0x7f4353336908>,
            <matplotlib.axes._subplots.AxesSubplot object at 0x7f43532ea400>]], 
            dtype=object)



- List of 'pyplot.subplots' Options

    Argument	    Description
    nrows	        Number of rows of subplots

    ncols	        Number of columns of subplots

    sharex	        All subplots should use the same x-axis ticks (adjusting the 
                      xlim will affect all subplots)

    sharey	        All subplots should use the same y-axis ticks (adjusting the 
                      ylim will affect all subplots)

    subplot_kw	    Dict of keywords passed to add_subplot call used to create each subplot

    **fig_kw	    Additional keywords to subplots are used when creating the figure, such as
                      plt.subplots(2, 2, figsize=(8, 6))



- Adjusting the Spacing Around Subplots

    By default, matplotlib leaves a certain amount of padding around the outside of the subplots
      and spacing between subplots.  This spacing is all specified relative to the height and
      width of the plot, so that if the plot is resized, it will dynamically adjust itself.


    # When called as a top-level function, the 'subplots_adjust' method changes padding and
    #   spacing for all plots
    >>> subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)


    # 'subplots_adjust' can also be called at the figure- or subplot-level
    >>> fit, axes = plt.subplots(2, 2, sharex=True, sharey=True)

    >>> for i in range(2):
            for j in range(2): 
                axes[i, j].hist(np.random.randn(500), bins=50, color='k', alpha=0.5)

    >>> plt.subplots_adjust(wspace=0, hspace=0)



- Colors, Markers, and Line Styles

    Matplotlib's main 'plot' function accepts arrays of x and y coordinates and optionally a
      string abbreviation indicating color and line style.

    # Plot x vs y with green dashes
    >>> ax.plot(x, y, 'g--')

    # More explicitly (Note colors can also be hex values)
    >>> ax.plot(x, y, linestyle='--', color='g')


    # Plot x vs y with black dashes and circles for markers
    >>> plt.plot(np.random.randn(30).cumsum(), 'ko--')

    # More explicity
    >>> plt.plot(np.random.nrandn(30).cumsum(), color='k', linestyle='dashed', marker='o')


    # By default, subsequent points in line plots are linearly interpolated.  To change this,
    #   the 'drawstyle' argument can be used.
    >>> data = np.random.randn(30).cumsum()

    # Uses linear interpolation
    >>> plt.plot(data, 'k--', label='Default')

    # Uses steps-post style
    >>> plt.plot(data, 'k-', drawstyle='steps-post', label='steps-post')
    >>> plt.legend(loc='best')



- Ticks, Labels, and Legends

    For most kinds of plot decorations, there are 2 main ways to do things:
      1. Use the procedural pyplot interface
      2. Use the more OO native matplotlib API

    The 'pyplot' interface is designed for interactive use.  It consists of methods like 'xlim',
      'xticks', and 'xticklabels'.  These control the plot range, tick locations, and tick labels,
      respectively.   These methods can be called in 2 ways:

      1. If called without an argument(ie plt.xlim()), they'll return the current value.
      2. If called with an argument value(ie plt.xlim([0, 10])), they'll set the current value.

    All such methods act on the active (or most recently created) AxesSubplot.



- Setting the Title, Axis Labels, Ticks, and TickLabels

    # Create a plot of a random walk
    >>> fig = plt.figure()
    >>> ax = fig.add_subplot(1, 1, 1)
    >>> ax.plot(np.random.randn(1000).cumsum())

    # Set x-axis ticks
    >>> ax.set_xticks([0, 250, 500, 750, 1000])

    # Set x-axis tick labels
    >>> ax.set_xticklabels(['one', 'two', 'three', 'four', 'five'], rotation = 30, fontsize='small')

    # Set plot title
    >>> ax.set_title('My first matplotlib plot')

    # Set label of x-axis
    >>> ax.set_xlabel('Stages')


    # The axes class also has a 'set' method that allows batch setting of plot properties
    >>> props = {
            'title': 'My first matplotlib plot',
            'xlabel': 'Stages'
        }
    >>> ax.set(**props)



- Adding Legends

    # Add labels to plots
    >>> from numpy.random import randn
    >>> fig = plt.figure()
    >>> ax = fig.add_subplot(1, 1, 1)
    >>> ax.plot(randn(1000).cumsum(), 'k', label='one')
    >>> ax.plot(randn(1000).cumsum(), 'k--', label='two')
    >>> ax.plot(randn(1000).cumsum(), 'k.', label='three')

    # Now, add the legend
    >>> ax.legend(loc='best')



- Annotations and Drawing on a Subplot

    In addition to the standard plot types, you may wish to draw your own plot annotations,
      which could consist of text, arrows, or other shapes.  

    # The 'text' method draws text at given coordinates (x, y) with optional styling
    >>> ax.text(x, y, 'Hello world!', family='monospace', fontsize=10)



- Example - Label Events on a Stock Price Chart

    # Add the plot
    >>> from datetime import datetime
    >>> fit = plt.figure()
    >>> ax = fig.add_subplot()
    >>> ax.set_title('Important dates in the 2008-2009 financial crisis')

    # Plot the S&P index closing price since 2007
    >>> data = pd.read_csv('examples/spx.csv', index_col=0, parse_dates=True)
    >>> spx = data['SPX']
    >>> spx.plot(ax=ax, style='k')

    # Create events from 2008 financial crisis
    >>> crisis_data = [
            (datetime(2007, 10, 11), 'Peak of bull market'),
            (datetime(2008, 3, 12), 'Bear Stearns Fails'),
            (datetime(2008, 9, 15), 'Lehman Bankruptcy')
        ]

    # Add arrows to plot
    >>> for date, label in crisis_data:
            ax.annotate(label, 
                        xy=(date, spx.asof(date) + 75),
                        xytext=(date, spx.asof(date) + 225),
                        arrowprops=dict(facecolor='black', headwidth=4, width=2, headlength=4),
                        horizontalalignment='left', 
                        verticalalignment='top')

    # Zoom in on 2007-2010
    >>> ax.set_xlim(['1/1/2007', '1/1/2011'])
    >>> ax.set_ylim([600, 1800])



- Example - Add Shapes to Plot

    # Create the plot
    >>> fig = plt.figure()
    >>> ax = fig.add_subplot(1, 1, 1)

    # Create the shapes
    >>> rect = plt.Rectangle((0.2, 0.75), 0.4, 0.15, color='k', alpha=0.3)
    >>> circ = plt.Circle((0.7, 0.2), 0.15, color='b', alpha=0.3)
    >>> pgon = plt.Polygon([[0.15, 0.15], [0.35, 0.4], [0.2, 0.6]], color='g', alpha=0.5)

    # Add the shapes to the plot
    >>> ax.add_patch(rect)
    >>> ax.add_patch(circ)
    >>> ax.add_patch(pgon)



- Saving Plots to File

    # Save a plot (file type is inferred from extension)
    >>> plt.savefig('figpath.svg')

    # Save, with dpi resolution and whitespace around plot set
    >>> plt.savefig('figpath.png', dpi=400, bbox_inches='tight')

    # We don't have to write to disk, we can write to any file-like object
    >>> from io import BytesIO
    >>> buffer = BytesIO()
    >>> plt.savefig(buffer)
    >>> plot_data = buffer.getvalue()



- List of 'Figure.savefig' Options

    Argument	    Description
    -------------------------------------------------------------------------------------------
    fname	        String containing a filepath or a Python file-like object. The figure 
                      format is inferred from the file extension (e.g., .pdf for PDF or .png for PNG)

    dpi	            The figure resolution in dots per inch; defaults to 100 out of the box but 
                      can be configured

    facecolor, edgecolor	The color of the figure background outside of the subplots; 'w' (white), 
                              by default

    format	        The explicit file format to use ('png', 'pdf', 'svg', 'ps', 'eps', ...)

    bbox_inches	    The portion of the figure to save; if 'tight' is passed, will attempt to trim 
                      the empty space around the figure



- matplotlib Configuraition

    All of matplotlib's default color schemes and default behavior can be customized via an 
      extensive set of global parameters.  Many of these parameters can be configured 
      programatically with the 'rc' method.

    # Set the global default figure size to be 10x10
    >>> plt.rc('figure', figsize=(10, 10))

    # Update the default font
    >>> font_options = {'family': 'monospace', 
                        'weight': 'bold',
                        'size': 'small'}
    >>> plt.rc('font', **font_options)



- seaborn

    1. matplotlib is a fairly low-level tool.  You assemble a plot from its base components.

    2. pandas has built-in methods to create visualizations from DataFrame and Series objects.

    3. 'seaborn' is a popular statistical graphics library that simplifies creating many common
         visualization types.  Note that importing seaborn will change many default matplotlib
         asthetics, so some people just import it and don't do anything else with it.



- Line Plots

    # Series and DataFrame each have a 'plot' method for making some basic plot types.
    #   By default, it creates line plots, with the index on the x-axis and the
    #   series data on the y-axis.
    >>> s = pd.Series(np.random.randn(10).cumsum(), index=np.arange(0, 100, 10))
    >>> s.plot()


    # DataFrames plot each column in a separate line
    >>> df = pd.DataFrame(np.random.randn(10, 4).cumsum(0),
                          columns=['A', 'B', 'C', 'D'],
                          index=np.arange(0, 100, 10))
    >>> df.plot()



- List of Series.plot Method Arguments

    Argument	    Description
    --------------------------------------------------------------------------------
    label	        Label for plot legend

    ax	            matplotlib subplot object to plot on; if nothing passed, uses active 
                      matplotlib subplot

    style	        Style string, like 'ko--', to be passed to matplotlib

    alpha	        The plot fill opacity (from 0 to 1)

    kind	        Can be 'area', 'bar', 'barh', 'density', 'hist', 'kde', 'line', 'pie'

    logy	        Use logarithmic scaling on the y-axis

    use_index	    Use the object index for tick labels

    rot 	        Rotation of tick labels (0 through 360)

    xticks	        Values to use for x-axis ticks

    yticks	        Values to use for y-axis ticks

    xlim	        x-axis limits (e.g., [0, 10])

    ylim	        y-axis limits

    grid	        Display axis grid (on by default)



- List of DataFrame-specific plot Arguments

    Argument	    Description
    --------------------------------------------------------------------------------
    subplots	    Plot each DataFrame column in a separate subplot

    sharex	        If subplots=True, share the same x-axis, linking ticks and limits

    sharey	        If subplots=True, share the same y-axis

    figsize	        Size of figure to create as tuple

    title	        Plot title as string

    legend	        Add a subplot legend (True by default)

    sort_columns	Plot columns in alphabetical order; by default uses existing column order



- Bar Plots From Series

    The 'plot.bar()' and 'plot.barh()' methods make vertical and horizontal bar plots.  The
      Series or DataFrame index will be used as the x(bar) or y(barh) ticks.

    # Create plots
    >>> fig, axes = plt.subplots(2, 1)
    >>> data = pd.Series(np.random.rand(16), index=list('abcdefghijklmnop'))

    # Create vertical bar graph, index along x-axis
    >>> data.plot.bar(ax=axes[0], color='k', alpha=0.7)

    # Create horizontal bar graph, index along y-axis
    >>> data.plot.barh(ax=axes[1], color='k', alpha=0.7



- Bar Plots From DataFrames

    # Create DataFrame
    >>> df = pd.DataFrame(np.random.rand(6, 4),
                          index=['one', 'two', 'three', 'four', 'five', 'six'],
                          columns=pd.Index(['A', 'B', 'C', 'D'], 
                          name='Genus'))
    >>> df

    Genus         A         B         C         D
    one    0.370670  0.602792  0.229159  0.486744
    two    0.420082  0.571653  0.049024  0.880592
    three  0.814568  0.277160  0.880316  0.431326
    four   0.374020  0.899420  0.460304  0.100843
    five   0.433270  0.125107  0.494675  0.961825
    six    0.601648  0.478576  0.205690  0.560547

    # Creates a bar graph with 6 groups of 4 bars
    >>> df.plot.bar()

    # Creates a stacked bar plot instead, with 6 bars, each combining 4 columns
    >>> df.plot.barh(stacked=True, alpha=0.5)



- Example - Bar Plot of Party Size By Day

    # Create the DataFrame
    >>> tips = pd.read_csv('examples/tips.csv')
    >>> party_counts = pd.crosstab(tips['day'], tips['size'])
    >>> party_counts

    size  1   2   3   4  5  6
    day                      
    Fri   1  16   1   1  0  0
    Sat   2  53  18  13  1  0
    Sun   0  39  15  18  3  1
    Thur  1  48   4   5  1  3


    # Just look at 2-5 person parties since 1- and 6- are low
    >>> party_counts = party_counts.loc[:, 2:5]


    # Normalize the counts to sum to 1
    >>> party_pcts = party_counts.div(party_counts.sum(1), axis=0)
    >>> party_pcts

    size         2         3         4         5
    day                                         
    Fri   0.888889  0.055556  0.055556  0.000000
    Sat   0.623529  0.211765  0.152941  0.011765
    Sun   0.520000  0.200000  0.240000  0.040000
    Thur  0.827586  0.068966  0.086207  0.017241


    # Create the bar graph, with 4 groups of 4 bars
    >>> party_pcts.plot.bar()



- Example - Using seaborn

    seaborn can make plotting aggregated or summarized data much easier.

    # Create a DataFrame of tip amounts
    >>> tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip'])
    >>> tips.head()

       total_bill   tip smoker  day    time  size   tip_pct
    0       16.99  1.01     No  Sun  Dinner     2  0.063204
    1       10.34  1.66     No  Sun  Dinner     3  0.191244
    2       21.01  3.50     No  Sun  Dinner     3  0.199886
    3       23.68  3.31     No  Sun  Dinner     2  0.162494
    4       24.59  3.61     No  Sun  Dinner     4  0.172069


    # Create a horizontal bar graph of tip percentage by day
    >>> sns.barplot(x='tip_pct', y='day', data=tips, orient='h')

    # Create the same graph, but separate lunch and dinner
    >>> sns.barplot(x='tip_pct', y='day', hue='time', data=tips, orient='h')

    # To change seaborn's default styles, use the 'set' method
    >>> sns.set(style='whitegrid')



- Histograms

    A histogram is a bar plot that gives a discretized display of value frequency.  The 
      data points are split into discrete, evenly spaced bins, and the number of data points
      in each bin is plotted.

    # Plot a histogram of the tip percentages
    >>> tips['tip_pct'].plot.hist(bins=50)



- Density Plots

    A 'density plot' is formed by computing an estimate of a continuous probability 
      distribution that might have generated the observed data.  The usual procedure is to 
      approximate this distribution as a mixture of “kernels” — that is, simpler distributions 
      like the normal distribution. Thus, density plots are also known as kernel density estimate 
      (KDE) plots. Using plot.kde makes a density plot using the conventional mixture-of-normals 
      estimate.

    >>> tips['tip_pct'].plot.density()


    Seaborn makes histograms and density plots even easier through its distplot method, which can 
      plot both a histogram and a continuous density estimate simultaneously. As an example, consider 
      a bimodal distribution consisting of draws from two different standard normal distributions.

    >>> comp1 = np.random.normal(0, 1, size=200)
    >>> comp2 = np.random.normal(10, 2, size=200)
    >>> values = pd.Series(np.concatenate([comp1, comp2]))
    >>> sns.distplot(values, bins=100, color='k')



- Scatter or Point Plots

    'Point plots' (or 'scatter plots') can be a useful way of examining the relationship between two 
      1D data series.

    # Load the 'macrodata' dataset from statsmodels and select features
    >>> macro = pd.read_csv('examples/macrodata.csv')
    >>> data = macro[['cpi', 'm1', 'tbilrate', 'unemp']]

    # Compute log differences
    >>> trans_data = np.log(data).diff().dropna()
    >>> trans_data[-5:]

              cpi        m1  tbilrate     unemp
    198 -0.007904  0.045361 -0.396881  0.105361
    199 -0.021979  0.066753 -2.277267  0.139762
    200  0.002340  0.010286  0.606136  0.160343
    201  0.008419  0.037461 -0.200671  0.127339
    202  0.008894  0.012202 -0.405465  0.042560

    # seaborn’s 'regplot' method makes a scatter plot and fits a linear regression line
    >>> sns.regplot('m1', 'unemp', data=trans_data)
    >>> plt.title('Changes in log %s versus log %s' % ('m1', 'unemp'))



- Pairs Plots

    In exploratory data analysis, it’s helpful to be able to look at all the scatter plots 
      among a group of variables; this is known as a 'pairs plot' or 'scatter plot matrix'. Making 
      such a plot from scratch is a bit of work, so seaborn has a convenient pairplot function, 
      which supports placing histograms or density estimates of each variable along the diagonal.

    >>> sns.pairplot(trans_data, diag_kind='kde', plot_kws={'alpha': 0.2})



- Facet Grids and Categorical Data

    One way to visualize data with many categorical variables is to use a facet grid. The seaborn
      function 'factorplot' simplifies making many kinds of faceted plots.

    >>> sns.factorplot(x='day', y='tip_pct', hue='time', col='smoker', kind='bar', 
                       data=tips[tips.tip_pct < 1])


    # Expand the facet grid by adding one row per time value
    >>> sns.factorplot(x='day', y='tip_pct', row='time', col='smoker', kind='bar', 
                       data=tips[tips.tip_pct < 1])


    # Create a 'factorplot' box plot
    >>> sns.factorplot(x='tip_pct', y='day', kind='box', data=tips[tips.tip_pct < 0.5])