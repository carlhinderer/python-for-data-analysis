------------------------------------------------------
CHAPTER 08 - DATA WRANGLING
------------------------------------------------------

- Hierarchical Indexing

    'Hierarchical indexing' is an important feature of pandas that enables you to have
      2 or more index levels on an axis.  It provides a way to work with higher dimensional
      data in a lower dimensional form.


    # Create a series with a hierarchical index
    >>> data = pd.Series(np.random.randn(9),
                         index=[['a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd'],
                                [1, 2, 3, 1, 3, 1, 2, 2, 3]])
    >>> data
    a  1   -0.204708
       2    0.478943
       3   -0.519439
    b  1   -0.555730
       3    1.965781
    c  1    1.393406
       2    0.092908
    d  2    0.281746
       3    0.769023
    dtype: float64

    >>> data.index
    MultiIndex(levels=[['a', 'b', 'c', 'd'], [1, 2, 3]],
               labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3], [0, 1, 2, 0, 2, 0, 1, 1, 2]])


    # With a hierarchical indexed object, partial indexing can be used
    >>> data['b']
    1   -0.555730
    3    1.965781
    dtype: float64

    >>> data['b':'c'] 
    b  1   -0.555730
       3    1.965781
    c  1    1.393406
       2    0.092908
    dtype: float64

    >>> data.loc[['b', 'd']]
    b  1   -0.555730
       3    1.965781
    d  2    0.281746
       3    0.769023
    dtype: float64


    # Selection from an inner level is possible
    >>> data.loc[:, 2]
    a    0.478943
    c    0.092908
    d    0.281746
    dtype: float64



- Stacking and Unstacking

    Hierarchical indexing plays an important role in reshaping data and group-based operations
      like forming a pivot table.  


    # Unstacking into a flat DataFrame
    >>> data.unstack()

              1         2         3
    a -0.204708  0.478943 -0.519439
    b -0.555730       NaN  1.965781
    c  1.393406  0.092908       NaN
    d       NaN  0.281746  0.769023


    # Stacking is the opposite of unstacking
    >>> data.unstack().stack()

    a  1   -0.204708
       2    0.478943
       3   -0.519439
    b  1   -0.555730
       3    1.965781
    c  1    1.393406
       2    0.092908
    d  2    0.281746
       3    0.769023
    dtype: float64



- Column-Level Hierarchical Indexes

    # Either axis of a DataFrame can have a hierarchical index
    >>> frame = pd.DataFrame(np.arange(12).reshape((4, 3)),
                             index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]],
                             columns=[['Ohio', 'Ohio', 'Colorado'],
                                      ['Green', 'Red', 'Green']])
    >>> frame
    
           Ohio     Colorado
        Green Red    Green
    a 1     0   1        2
      2     3   4        5
    b 1     6   7        8
      2     9  10       11


   # Select from hierarchical column
   >>> frame['Ohio']

    color      Green  Red
    key1 key2            
    a    1         0    1
         2         3    4
    b    1         6    7
         2         9   10



- Reordering and Sorting Levels

    At times, we will need to rearrange the order of the levels on the axis or sort the data
      by the values in one specific level.  The 'swaplevel' takes 2 level numbers or names
      and returns a new object with the levels interchanges.


    >>> frame.swaplevel('key1', 'key2')

    state      Ohio     Colorado
    color     Green Red    Green
    key2 key1                   
    1    a        0   1        2
    2    a        3   4        5
    1    b        6   7        8
    2    b        9  10       11


    The 'sort_index' method sorts the data using only the values in a single level.  When
      swapping levels, it's not uncommon to also use 'sort_index' so that the result is
      lexicographically sorted by the indicated level.


    # Sort on 'key2'
    >>> frame.sort_index(level=1)

    state      Ohio     Colorado
    color     Green Red    Green
    key1 key2                   
    a    1        0   1        2
    b    1        6   7        8
    a    2        3   4        5
    b    2        9  10       11
    

    >>> frame.swaplevel(0, 1).sort_index(level=0)
    Out[26]: 
    state      Ohio     Colorado
    color     Green Red    Green
    key2 key1                   
    1    a        0   1        2
         b        6   7        8
    2    a        3   4        5
         b        9  10       11



- Summary Statistics by Level

    Many of the DataFrame's descriptive and summary statistics have a 'level' option in 
      which you can specify the level you want to aggregate on a particular axis.


    # Aggregate rows
    >>> frame.sum(level='key2')

    state  Ohio     Colorado
    color Green Red    Green
    key2                    
    1         6   8       10
    2        12  14       16
    

    # Aggregate columns
    >>> frame.sum(level='color', axis=1)

    color      Green  Red
    key1 key2            
    a    1         2    1
         2         8    4
    b    1        14    7
         2        20   10



- Indexing With a DataFrame's Columns

- Combining and Merging Datasets

- Database-Style DataFrame Joins

- List of Merge Function Arguments

- Merging on Index

- Concatenating Along An Axis

- List of 'concat' Function Arguments

- Combining Data With Overlap

- Reshaping With Hierarchical Indexing

- Pivoting 'Long' to 'Wide' Format

- Pivoting 'Wide' to 'Long' Format